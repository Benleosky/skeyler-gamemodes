----------------------	Sassilization--	By Sassafrass / Spacetech / LuaPineapple--------------------local tex = Material("sassilization/resourcehud.png")local texw, texh = 560, 50local tex2 = Material("sassilization/icons/food.png")local texw2, texh2 = 32, 32local tex3 = Material("sassilization/icons/iron.png")local tex4 = Material("sassilization/icons/supply.png")local totalWidth, u, v, uw, vh, w, h, x, y, x1, y1, ironWidth, textX, textY, textWidth, textHeight, supplyWidthlocal lastIron = 0local lastFood = 0local lastSupply = 0local foodNotifiers = {}local ironNotifiers = {}local function addNotifier( table, x, y, scale, amount )	local note = table[math.floor(RealTime())] or table[math.floor(RealTime()-1)]	if( note ) then		note.amount = note.amount + amount		note.endTime = RealTime() + 2		table[math.floor(RealTime()-1)] = nil		table[math.floor(RealTime())] = note	else		note = {}		note.startX = x		note.startY = y		if( amount < 0 ) then			note.endX = x			note.endY = y + 30 * scale		else			note.endX = x			note.endY = y + 30 * scale		end		note.endTime = RealTime() + 2		note.amount = amount		table[math.floor(RealTime())] = note	endendlocal function addFoodNotifier( x, y, scale, amount )	addNotifier( foodNotifiers, x, y, scale, amount )endlocal function addIronNotifier( x, y, scale, amount )	addNotifier( ironNotifiers, x, y, scale, amount )endlocal function updateNotifier(note, curTime)	local perc = 1 - (note.endTime - curTime) * 0.25	surface.SetTextPos( 		note.startX + (note.endX - note.startX) * perc,		note.startY + (note.endY - note.startY) * perc	)	perc = (note.endTime - curTime) / 0.5	if( note.amount > 0 ) then		surface.SetTextColor( 100, 255, 100, perc*255 )		surface.DrawText( "+" .. tostring( note.amount ) )	else		surface.SetTextColor( 255, 50, 50, perc*255 )		surface.DrawText( tostring( note.amount ) )	endendlocal function updateNotifiers()	local curTime = RealTime()	surface.SetFont( SA.HUD.FONTS.NoteFont )	for _, note in pairs( ironNotifiers ) do		if( curTime >= note.endTime ) then			ironNotifiers[_] = nil		else			updateNotifier(note, curTime)		end	end	for _, note in pairs( foodNotifiers ) do		if( curTime >= note.endTime ) then			foodNotifiers[_] = nil		else			updateNotifier(note, curTime)		end	endendfunction GM:DrawResourceBar( le, sw, sh, scale )	surface.SetMaterial(tex)	totalWidth = 500		u, v = 288 / texw, 0 --U, V Coord	uw, vh = 720, 80 --U width, V height	w, h = totalWidth, 40 --width, height	x, y = sw * 0.5 - w * scale * 0.5, 20 * scale --screen x, screen y		surface.DrawTexturedRectUVEx( x, y, w * scale, h * scale, 0, 0, 1, 1 )		-- Draw food icon	surface.SetDrawColor( 255, 255, 255, 255 )	surface.SetMaterial(tex2)	u, v = 96 / texw, 160 / texh	uw, vh = 32, 32	w, h = 32, 32	x1, y1 = x + 30 * scale, y + 2 * scale		surface.DrawTexturedRectUVEx( x1, y1, w * scale, h * scale, 0, 0, 1, 1 )		--Draw food text	surface.SetFont( SA.HUD.FONTS.ResourceFont )	surface.SetTextColor( 255, 255, 255, 255 )	surface.SetTextPos( x1 + 42 * scale, y1 + 6 * scale )		textX, textY = x1 + 42 * scale, y1 + 6 * scale	local food = le:GetFood()	textWidth, textHeight = surface.GetTextSize( tostring( food ) .. " " )		surface.DrawText( tostring( le:GetFood() ) )	if( food != lastFood ) then		addFoodNotifier( textX, textY, scale, food - lastFood )	end	lastFood = food		textX = textX + textWidth		surface.SetTextPos( textX, textY )	surface.SetTextColor( 100, 255, 100, 255 )	surface.DrawText( "(+" .. tostring( le:GetFoodIncome() ) .. ")" )		-- Draw iron icon	surface.SetDrawColor( 255, 255, 255, 255 )	surface.SetMaterial(tex3)	local iron = le:GetIron()	ironWidth = 42 + surface.GetTextSize( tostring( iron ) .. " (+" .. tostring( le:GetIronIncome() ) .. ")" )		u, v = 64 / texw, 160 / texh	uw, vh = 32, 32	w, h = 32, 32	x1, y1 = x + totalWidth * 0.5 * scale - ironWidth * 0.5, y + 2 * scale		surface.DrawTexturedRectUVEx( x1, y1, w * scale, h * scale, 0, 0, 1, 1 )		--Draw iron text	surface.SetTextColor( 255, 255, 255, 255 )	surface.SetTextPos( x1 + 42 * scale, y1 + 6 * scale )		textX, textY = x1 + 42 * scale, y1 + 6 * scale	textWidth, textHeight = surface.GetTextSize( tostring( iron ) .. " " )		surface.DrawText( tostring( iron ) )	if( iron != lastIron ) then		addIronNotifier( textX, textY, scale, iron - lastIron )	end	lastIron = iron		textX = textX + textWidth		surface.SetTextPos( textX, textY )	surface.SetTextColor( 100, 255, 100, 255 )	surface.DrawText( "(+" .. tostring( le:GetIronIncome() ) .. ")" )		-- Draw supply icon	surface.SetDrawColor( 255, 255, 255, 255 )	surface.SetMaterial(tex4)	supplyWidth = 78 * scale + surface.GetTextSize( tostring( le:GetSupplied() ) .. " / " .. tostring( le:GetSupply() ) )		u, v = 128 / texw, 160 / texh	uw, vh = 32, 32	w, h = 32, 32	x1, y1 = x + totalWidth * scale - supplyWidth, y + 2 * scale		surface.DrawTexturedRectUVEx( x1, y1, w * scale, h * scale, 0, 0, 1, 1 )		-- Draw supply text	surface.SetTextColor( 255, 255, 255, 255 )	surface.SetTextPos( x1 + 42 * scale, y1 + 6 * scale )		textX, textY = x1 + 42 * scale, y1 + 6 * scale	textWidth, textHeight = surface.GetTextSize( tostring( le:GetSupplied() ) .. " " )		surface.DrawText( tostring( le:GetSupplied() ) )		textX = textX + textWidth		surface.SetTextPos( textX, textY )	-- surface.SetTextColor( 100, 255, 100, 255 )	surface.DrawText( "/ " .. tostring( le:GetSupply() ) )	updateNotifiers()end